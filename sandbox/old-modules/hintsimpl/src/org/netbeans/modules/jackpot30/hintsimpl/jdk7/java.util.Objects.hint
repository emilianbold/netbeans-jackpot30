<!hint="java.util.Objects">
//java.util.Objects.equals:
($1 == null) ? ($2 != null) : !$1.equals($2) :: $1 instanceof java.lang.Object && $2 instanceof java.lang.Object
=>java.util.Objects.equals($1, $2)
;;

(null == $1) ? ($2 != null) : !$1.equals($2) :: $1 instanceof java.lang.Object && $2 instanceof java.lang.Object
=>java.util.Objects.equals($1, $2)
;;

($1 == null) ? (null != $2) : !$1.equals($2) :: $1 instanceof java.lang.Object && $2 instanceof java.lang.Object
=>java.util.Objects.equals($1, $2)
;;

(null == $1) ? (null != $2) : !$1.equals($2) :: $1 instanceof java.lang.Object && $2 instanceof java.lang.Object
=>java.util.Objects.equals($1, $2)
;;

$1 != $2 && ($1 == null || !$1.equals($2)) :: $1 instanceof java.lang.Object && $2 instanceof java.lang.Object
=>java.util.Objects.equals($1, $2)
;;

$1 != $2 && (null == $1 || !$1.equals($2)) :: $1 instanceof java.lang.Object && $2 instanceof java.lang.Object
=>java.util.Objects.equals($1, $2)
;;

($1 == null) ? ($2 == null) : $1.equals($2) :: $1 instanceof java.lang.Object && $2 instanceof java.lang.Object
=>java.util.Objects.equals($1, $2)
;;

(null == $1) ? ($2 == null) : $1.equals($2) :: $1 instanceof java.lang.Object && $2 instanceof java.lang.Object
=>java.util.Objects.equals($1, $2)
;;

($1 == null) ? (null == $2) : $1.equals($2) :: $1 instanceof java.lang.Object && $2 instanceof java.lang.Object
=>java.util.Objects.equals($1, $2)
;;

(null == $1) ? (null == $2) : $1.equals($2) :: $1 instanceof java.lang.Object && $2 instanceof java.lang.Object
=>java.util.Objects.equals($1, $2)
;;

($1 != null) ? $1.equals($2) : ($2 == null) :: $1 instanceof java.lang.Object && $2 instanceof java.lang.Object
=>java.util.Objects.equals($1, $2)
;;

(null != $1) ? $1.equals($2) : ($2 == null) :: $1 instanceof java.lang.Object && $2 instanceof java.lang.Object
=>java.util.Objects.equals($1, $2)
;;

($1 != null) ? $1.equals($2) : (null == $2) :: $1 instanceof java.lang.Object && $2 instanceof java.lang.Object
=>java.util.Objects.equals($1, $2)
;;

(null != $1) ? $1.equals($2) : (null == $2) :: $1 instanceof java.lang.Object && $2 instanceof java.lang.Object
=>java.util.Objects.equals($1, $2)
;;

$1 == $2 && ($1 == null || $1.equals($2)) :: $1 instanceof java.lang.Object && $2 instanceof java.lang.Object
=>java.util.Objects.equals($1, $2)
;;

$1 == $2 && (null == $1 || $1.equals($2)) :: $1 instanceof java.lang.Object && $2 instanceof java.lang.Object
=>java.util.Objects.equals($1, $2)
;;

//java.util.Objects.hashCode:
$1 != null ? $1.hashCode() : 0 :: $1 instanceof java.lang.Object
=>java.util.Objects.hashCode($1)
;;

null != $1 ? $1.hashCode() : 0 :: $1 instanceof java.lang.Object
=>java.util.Objects.hashCode($1)
;;

$1 == null ? 0 : $1.hashCode() :: $1 instanceof java.lang.Object
=>java.util.Objects.hashCode($1)
;;

null == $1 ? 0 : $1.hashCode() :: $1 instanceof java.lang.Object
=>java.util.Objects.hashCode($1)
;;

//java.util.Objects.toString:
$1 != null ? $1.toString() : $def :: $1 instanceof java.lang.Object
=>java.util.Objects.toString($1, $def)
;;

null != $1 ? $1.toString() : $def :: $1 instanceof java.lang.Object
=>java.util.Objects.toString($1, $def)
;;

$1 == null ? $def : $1.hashCode() :: $1 instanceof java.lang.Object
=>java.util.Objects.hashCode($1, $def)
;;

null == $1 ? $def : $1.hashCode() :: $1 instanceof java.lang.Object
=>java.util.Objects.hashCode($1, $def)
;;
