/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2010 Sun Microsystems, Inc.
 */
package org.netbeans.modules.jackpot30.impl.refactoring;

import java.awt.CardLayout;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collection;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.jackpot30.impl.WebUtilities;
import org.netbeans.modules.jackpot30.impl.batch.BatchSearch.Scope;
import org.openide.NotificationLineSupport;
import org.openide.util.Exceptions;
import org.openide.util.RequestProcessor;

/**
 *
 * @author lahvac
 */
public class AddScopePanel extends javax.swing.JPanel {

    private final JButton okButton;

    public AddScopePanel(JButton okButton) {
        this.okButton = okButton;
        initComponents();
        noIndexButton.setSelected(true);
        DocumentListener updateErrorsListener = new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                updateErrors();
            }
            public void removeUpdate(DocumentEvent e) {
                updateErrors();
            }
            public void changedUpdate(DocumentEvent e) {}
        };
        folder.getDocument().addDocumentListener(updateErrorsListener);
        indexFolder.getDocument().addDocumentListener(updateErrorsListener);
        indexURL.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                indexURLUpdated();
            }
            public void removeUpdate(DocumentEvent e) {
                indexURLUpdated();
            }
            public void changedUpdate(DocumentEvent e) {
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        folderPanel = new javax.swing.JPanel();
        folderLabel = new javax.swing.JLabel();
        folderChooser = new javax.swing.JButton();
        folder = new javax.swing.JTextField();
        indexVariantsChooserPanel = new javax.swing.JPanel();
        noIndexButton = new javax.swing.JRadioButton();
        localIndexButton = new javax.swing.JRadioButton();
        removeIndexButton = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        indexVariantsPanel = new javax.swing.JPanel();
        localIndexPanel = new javax.swing.JPanel();
        indexFolder = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        indexFolderLabel = new javax.swing.JLabel();
        updateIndexCheckbox = new javax.swing.JCheckBox();
        remoteIndexPanel = new javax.swing.JPanel();
        indexURL = new javax.swing.JTextField();
        indexURLLabel = new javax.swing.JLabel();
        subIndex = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        noIndexPanel = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        setLayout(new java.awt.GridBagLayout());

        folderPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(folderLabel, org.openide.util.NbBundle.getMessage(AddScopePanel.class, "AddScopePanel.folderLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
        folderPanel.add(folderLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(folderChooser, org.openide.util.NbBundle.getMessage(AddScopePanel.class, "AddScopePanel.folderChooser.text")); // NOI18N
        folderChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                folderChooserActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        folderPanel.add(folderChooser, gridBagConstraints);

        folder.setText(org.openide.util.NbBundle.getMessage(AddScopePanel.class, "AddScopePanel.folder.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        folderPanel.add(folder, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(folderPanel, gridBagConstraints);

        indexVariantsChooserPanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(noIndexButton);
        org.openide.awt.Mnemonics.setLocalizedText(noIndexButton, org.openide.util.NbBundle.getMessage(AddScopePanel.class, "AddScopePanel.noIndexButton.text")); // NOI18N
        noIndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noIndexButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        indexVariantsChooserPanel.add(noIndexButton, gridBagConstraints);

        buttonGroup1.add(localIndexButton);
        org.openide.awt.Mnemonics.setLocalizedText(localIndexButton, org.openide.util.NbBundle.getMessage(AddScopePanel.class, "AddScopePanel.localIndexButton.text")); // NOI18N
        localIndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localIndexButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        indexVariantsChooserPanel.add(localIndexButton, gridBagConstraints);

        buttonGroup1.add(removeIndexButton);
        org.openide.awt.Mnemonics.setLocalizedText(removeIndexButton, org.openide.util.NbBundle.getMessage(AddScopePanel.class, "AddScopePanel.removeIndexButton.text")); // NOI18N
        removeIndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeIndexButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        indexVariantsChooserPanel.add(removeIndexButton, gridBagConstraints);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        indexVariantsChooserPanel.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(indexVariantsChooserPanel, gridBagConstraints);

        indexVariantsPanel.setLayout(new java.awt.CardLayout());

        indexFolder.setText(org.openide.util.NbBundle.getMessage(AddScopePanel.class, "AddScopePanel.indexFolder.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browse, org.openide.util.NbBundle.getMessage(AddScopePanel.class, "AddScopePanel.browse.text")); // NOI18N
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(indexFolderLabel, org.openide.util.NbBundle.getMessage(AddScopePanel.class, "AddScopePanel.indexFolderLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(updateIndexCheckbox, org.openide.util.NbBundle.getMessage(AddScopePanel.class, "AddScopePanel.updateIndexCheckbox.text")); // NOI18N

        javax.swing.GroupLayout localIndexPanelLayout = new javax.swing.GroupLayout(localIndexPanel);
        localIndexPanel.setLayout(localIndexPanelLayout);
        localIndexPanelLayout.setHorizontalGroup(
            localIndexPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(localIndexPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(localIndexPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(localIndexPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(updateIndexCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, localIndexPanelLayout.createSequentialGroup()
                        .addComponent(indexFolderLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(indexFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(browse)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        localIndexPanelLayout.setVerticalGroup(
            localIndexPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(localIndexPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(localIndexPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indexFolderLabel)
                    .addComponent(indexFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateIndexCheckbox)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        indexVariantsPanel.add(localIndexPanel, "localIndex");

        indexURL.setColumns(40);
        indexURL.setText(org.openide.util.NbBundle.getMessage(AddScopePanel.class, "AddScopePanel.indexURL.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(indexURLLabel, org.openide.util.NbBundle.getMessage(AddScopePanel.class, "AddScopePanel.indexURLLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AddScopePanel.class, "AddScopePanel.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout remoteIndexPanelLayout = new javax.swing.GroupLayout(remoteIndexPanel);
        remoteIndexPanel.setLayout(remoteIndexPanelLayout);
        remoteIndexPanelLayout.setHorizontalGroup(
            remoteIndexPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(remoteIndexPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(remoteIndexPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(remoteIndexPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subIndex, 0, 570, Short.MAX_VALUE))
                    .addGroup(remoteIndexPanelLayout.createSequentialGroup()
                        .addComponent(indexURLLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(indexURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        remoteIndexPanelLayout.setVerticalGroup(
            remoteIndexPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(remoteIndexPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(remoteIndexPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indexURLLabel)
                    .addComponent(indexURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(remoteIndexPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(subIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        indexVariantsPanel.add(remoteIndexPanel, "remoteIndex");

        javax.swing.GroupLayout noIndexPanelLayout = new javax.swing.GroupLayout(noIndexPanel);
        noIndexPanel.setLayout(noIndexPanelLayout);
        noIndexPanelLayout.setHorizontalGroup(
            noIndexPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 678, Short.MAX_VALUE)
        );
        noIndexPanelLayout.setVerticalGroup(
            noIndexPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 79, Short.MAX_VALUE)
        );

        indexVariantsPanel.add(noIndexPanel, "noIndex");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(indexVariantsPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void folderChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_folderChooserActionPerformed
        showFileChooser(folder);
}//GEN-LAST:event_folderChooserActionPerformed

    private void noIndexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noIndexButtonActionPerformed
        selectCorrectCard();
    }//GEN-LAST:event_noIndexButtonActionPerformed

    private void localIndexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localIndexButtonActionPerformed
        selectCorrectCard();
    }//GEN-LAST:event_localIndexButtonActionPerformed

    private void removeIndexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeIndexButtonActionPerformed
        selectCorrectCard();
    }//GEN-LAST:event_removeIndexButtonActionPerformed

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        showFileChooser(indexFolder);
    }//GEN-LAST:event_browseActionPerformed

    private void selectCorrectCard() {
        String card;

        if (noIndexButton.isSelected()) card = "noIndex";
        else if (localIndexButton.isSelected()) card = "localIndex";
        else {
            card = "remoteIndex";
            indexURLUpdated();
        }

        ((CardLayout) indexVariantsPanel.getLayout()).show(indexVariantsPanel, card);

        updateErrors();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField folder;
    private javax.swing.JButton folderChooser;
    private javax.swing.JLabel folderLabel;
    private javax.swing.JPanel folderPanel;
    private javax.swing.JTextField indexFolder;
    private javax.swing.JLabel indexFolderLabel;
    private javax.swing.JTextField indexURL;
    private javax.swing.JLabel indexURLLabel;
    private javax.swing.JPanel indexVariantsChooserPanel;
    private javax.swing.JPanel indexVariantsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton localIndexButton;
    private javax.swing.JPanel localIndexPanel;
    private javax.swing.JRadioButton noIndexButton;
    private javax.swing.JPanel noIndexPanel;
    private javax.swing.JPanel remoteIndexPanel;
    private javax.swing.JRadioButton removeIndexButton;
    private javax.swing.JComboBox subIndex;
    private javax.swing.JCheckBox updateIndexCheckbox;
    // End of variables declaration//GEN-END:variables

    private void showFileChooser(JTextField folder) {
        JFileChooser c = new JFileChooser();

        c.setSelectedFile(new File(folder.getText()));
        c.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        c.setMultiSelectionEnabled(false);
        c.setApproveButtonText("Select");

        if (c.showDialog(this, null) == JFileChooser.APPROVE_OPTION) {
            folder.setText(c.getSelectedFile().getAbsolutePath());
        }
    }

    public void setScope(Scope scope) {
        folder.setText(scope.folder);
        if (scope.indexURL != null) {
            if (scope.subIndex != null) {
                removeIndexButton.setSelected(true);
                indexURL.setText(scope.indexURL);
                subIndex.setSelectedItem(scope.subIndex);
            } else {
                localIndexButton.setSelected(true);
                indexFolder.setText(scope.indexURL);
                updateIndexCheckbox.setSelected(scope.update);
            }
        } else {
            noIndexButton.setSelected(true);
        }

        selectCorrectCard();
    }

    public Scope getScope() {
        if (noIndexButton.isSelected()) {
            return Scope.createGivenFolderNoIndex(folder.getText());
        }
        if (localIndexButton.isSelected()) {
            return Scope.createGivenFolderLocalIndex(folder.getText(), new File(indexFolder.getText()), updateIndexCheckbox.isSelected());
        }
        if (removeIndexButton.isSelected()) {
            return Scope.createGivenFolderRemoteIndex(folder.getText(), indexURL.getText(), (String) subIndex.getSelectedItem());
        }

        throw new IllegalStateException();
    }

    private NotificationLineSupport notificationSupport;

    public void setNotificationSupport(NotificationLineSupport notificationSupport) {
        this.notificationSupport = notificationSupport;
        selectCorrectCard();
    }

    private void updateErrors() {
        notificationSupport.clearMessages();

        if (!new File(folder.getText()).exists()) {
            notificationSupport.setErrorMessage("Specified directory does not exist.");
            okButton.setEnabled(false);
            return;
        }

        if (!new File(folder.getText()).isDirectory()) {
            notificationSupport.setErrorMessage("Specified directory is not directory.");
            okButton.setEnabled(false);
            return ;
        }

        if (localIndexButton.isSelected()) {
            File indexFile = new File(indexFolder.getText());

            updateIndexCheckbox.setEnabled(indexFile.exists());

            if (!indexFile.exists()) {
                notificationSupport.setInformationMessage("Index does not exist and will be created.");
                okButton.setEnabled(true);
                return;
            }

            if (!indexFile.isDirectory()) {
               notificationSupport.setErrorMessage("Index is not a folder.");
                okButton.setEnabled(false);
               return;
            }

            //check that the folder is correct index
        }

        if (removeIndexButton.isSelected()) {
            if (checkingIndexURL.get()) {
                notificationSupport.setInformationMessage("Checking index URL");
                okButton.setEnabled(false);
                return;
            }

            String urlError = checkingIndexURLError.get();

            if (urlError != null) {
                notificationSupport.setErrorMessage(urlError);
                okButton.setEnabled(false);
                return;
            }
        }
        
        okButton.setEnabled(true);
    }

    private final AtomicBoolean checkingIndexURL = new AtomicBoolean();
    private final AtomicReference<String> checkingIndexURLContentCopy = new AtomicReference<String>();
    private final AtomicReference<String> checkingIndexURLError = new AtomicReference<String>();

    private void indexURLUpdated() {
        checkingIndexURLContentCopy.set(indexURL.getText());
        urlCheckerTask.cancel();
        urlCheckerTask.schedule(50);
    }
    
    private static final RequestProcessor WORKER = new RequestProcessor(AddScopePanel.class.getName(), 1, false, false);
    private final RequestProcessor.Task urlCheckerTask = WORKER.create(new Runnable() {

        public void run() {
            checkingIndexURL.set(true);
            checkingIndexURLError.set(null);

            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    updateErrors();
                }
            });

            String urlText = checkingIndexURLContentCopy.get();
            Collection<? extends String> subindices = null;

            try {
                URL url = new URL(urlText);

                if (!url.getPath().endsWith("/"))
                    url = new URL(url.getProtocol(), url.getHost(), url.getPort(), url.getPath() + "/" + (url.getQuery() != null ? "?" + url.getQuery() : ""));
                
                subindices = WebUtilities.requestStringArrayResponse(url.toURI().resolve("list"));

                if (subindices.isEmpty()) {
                   checkingIndexURLError.set("Not an index.");
                }
            } catch (URISyntaxException ex) {
                checkingIndexURLError.set(ex.getLocalizedMessage());
            } catch (MalformedURLException ex) {
                checkingIndexURLError.set(ex.getLocalizedMessage());
            }
            
            checkingIndexURL.set(false);

            final Collection<? extends String> subindicesFinal = subindices;

            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    updateErrors();

                    if (subindicesFinal == null) return;

                    DefaultComboBoxModel model = (DefaultComboBoxModel) subIndex.getModel();
                    String selected = (String) model.getSelectedItem();

                    model.removeAllElements();

                    boolean containsSelection = false;

                    for (String subindex : subindicesFinal) {
                        if (subindex.equals(selected)) containsSelection = true;
                        model.addElement(subindex);
                    }

                    if (containsSelection) {
                        model.setSelectedItem(selected);
                    }
                }
            });
        }
    });
}
