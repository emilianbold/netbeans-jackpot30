/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2009-2010 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2009-2010 Sun Microsystems, Inc.
 */

package org.netbeans.modules.jackpot30.impl.refactoring;

import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.prefs.Preferences;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.modules.jackpot30.impl.batch.EnhancedScopes.GivenFolderScope;
import org.netbeans.modules.java.hints.jackpot.impl.batch.BatchSearch.Scope;
import org.netbeans.modules.java.hints.jackpot.impl.batch.Scopes;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.NbPreferences;

/**
 *
 * @author lahvac
 */
public class ScopesPanel extends javax.swing.JPanel {

    private ChangeListener changeListener;
    
    public ScopesPanel() {
        initComponents();

        ItemListener ilImpl = new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                stateChanged();
                enableDisableEditRemove();
            }
        };

        scope.addItemListener(ilImpl);

        scope.setModel(new DefaultComboBoxModel());//XXX
        scope.setRenderer(new RendererImpl());
    }

    public void setChangeListener(ChangeListener changeListener) {
        this.changeListener = changeListener;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        main = new javax.swing.ButtonGroup();
        scopePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        scope = new javax.swing.JComboBox();
        add = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        scopePanel.setLayout(new java.awt.GridBagLayout());

        jLabel2.setLabelFor(scope);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ScopesPanel.class, "ScopesPanel.jLabel2.text")); // NOI18N

        scope.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        scope.setPrototypeDisplayValue(SCOPE_COMBO_PROTOTYPE);

        org.openide.awt.Mnemonics.setLocalizedText(add, org.openide.util.NbBundle.getMessage(ScopesPanel.class, "ScopesPanel.add.text")); // NOI18N
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(edit, org.openide.util.NbBundle.getMessage(ScopesPanel.class, "ScopesPanel.edit.text")); // NOI18N
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeButton, org.openide.util.NbBundle.getMessage(ScopesPanel.class, "ScopesPanel.removeButton.text")); // NOI18N
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(scopePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 576, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(layout.createSequentialGroup()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scope, 0, 334, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(add)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(edit)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(removeButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(11, 11, 11)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(scope, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(add)
                    .add(edit)
                    .add(removeButton))
                .add(18, 18, 18)
                .add(scopePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        addEditScope(false);
    }//GEN-LAST:event_addActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        addEditScope(true);
    }//GEN-LAST:event_editActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        DefaultComboBoxModel model = (DefaultComboBoxModel) scope.getModel();
        int index = model.getIndexOf(model.getSelectedItem());

        model.removeElementAt(index);
    }//GEN-LAST:event_removeButtonActionPerformed

    private void stateChanged() {
        changeListener.stateChanged(new ChangeEvent(this));
    }

    private void enableDisableEditRemove() {
        boolean enableEditRemove = scope.getSelectedItem() instanceof GivenFolderScope;

        edit.setEnabled(enableEditRemove);
        removeButton.setEnabled(enableEditRemove);
    }

    public void setScope(Scope scope) {
        this.scope.setSelectedItem(scope);
        stateChanged();
    }

    public Scope getScope() {
        return (Scope) this.scope.getSelectedItem();
    }

    private static final String SCOPES_KEY = ScopesPanel.class.getSimpleName() + "/scopes";
    private static final String LAST_SELECTED_SCOPE_KEY = "lastSelected";

    public void fillInFromSettings() {
        Preferences prefs = NbPreferences.forModule(ScopesPanel.class).node(SCOPES_KEY);
        DefaultComboBoxModel dcbm = new DefaultComboBoxModel();

        dcbm.addElement(Scopes.allOpenedProjectsScope());

//        String lastSelectedFolder = prefs.get(LAST_SELECTED_SCOPE_KEY, null);
//        Scope lastSelectedScope = null;
//
//        if (prefs != null) {
//            try {
//                for (String key : prefs.keys()) {
//                    if (key.startsWith("scope")) {
//                        Scope scope = Scope.deserialize(prefs.get(key, null));
//
//                        if (scope.folder.equals(lastSelectedFolder)) {
//                            lastSelectedScope = scope;
//                        }
//
//                        dcbm.addElement(scope);
//                    }
//                }
//            } catch (BackingStoreException ex) {
//                Exceptions.printStackTrace(ex);
//            }
//        }
//
//        scope.setModel(dcbm);
//        if (lastSelectedScope != null) {
//            scope.setSelectedItem(lastSelectedScope);
//        } else {
            scope.setSelectedIndex(0);
//        }

        enableDisableEditRemove();
    }

    public void saveScopesCombo() {
//        Preferences prefs = NbPreferences.forModule(ScopesPanel.class).node(SCOPES_KEY);
//
//        try {
//            prefs.clear();
//        } catch (BackingStoreException ex) {
//            Exceptions.printStackTrace(ex);
//        }
//
//        for (int i = 0; i < scope.getModel().getSize(); i++) {
//            Scope currentScope = (Scope) scope.getModel().getElementAt(i);
//
//            if (currentScope.scopeType == ScopeType.ALL_OPENED_PROJECTS) continue;
//
//            prefs.put("scope" + i, currentScope.serialize());
//        }
//
//        Scope selected = (Scope) scope.getModel().getSelectedItem();
//
//        if (selected.scopeType == ScopeType.GIVEN_FOLDER) {
//            prefs.put(LAST_SELECTED_SCOPE_KEY, selected.folder);
//        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton edit;
    private javax.swing.JLabel jLabel2;
    private javax.swing.ButtonGroup main;
    private javax.swing.JButton removeButton;
    private javax.swing.JComboBox scope;
    private javax.swing.JPanel scopePanel;
    // End of variables declaration//GEN-END:variables

    private static final class RendererImpl extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            Object displayName;

            if (value instanceof Scope) {
                displayName = ((Scope) value).getDisplayName();
            } else {
                displayName = value;
            }
            
            return super.getListCellRendererComponent(list, displayName, index, isSelected, cellHasFocus);
        }

    }

    private void addEditScope(boolean edit) {
        JButton okButton = new JButton("OK");
        AddScopePanel panel = new AddScopePanel(okButton);
        DialogDescriptor dd = new DialogDescriptor(panel, "Add Scope", true, new Object[] {okButton, DialogDescriptor.CANCEL_OPTION}, okButton, DialogDescriptor.DEFAULT_ALIGN, null, null);

        dd.setClosingOptions(null);
        panel.setNotificationSupport(dd.createNotificationLineSupport());

        if (edit) {
            panel.setScope((GivenFolderScope) scope.getModel().getSelectedItem());
        }

        if (DialogDisplayer.getDefault().notify(dd) == okButton) {
            DefaultComboBoxModel model = (DefaultComboBoxModel) scope.getModel();
            Scope scope = panel.getScope();

            if (edit) {
                int index = model.getIndexOf(model.getSelectedItem());

                model.removeElementAt(index);
                model.insertElementAt(scope, index);
            } else {
                model.addElement(scope);
            }
            
            model.setSelectedItem(scope);
        }
    }

    private static final String SCOPE_COMBO_PROTOTYPE = "0123456789012345678901234567890123456789012345";
}
