package org.netbeans.modules.jackpot30.impl.refactoring;

import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.EnumMap;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.jackpot30.impl.batch.BatchSearch.Scope;

/**
 *
 * @author lahvac
 */
public class FindDuplicatesRefactoringPanel extends javax.swing.JPanel {

    public FindDuplicatesRefactoringPanel(final ChangeListener parent) {
        initComponents();
        pattern.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                parent.stateChanged(new ChangeEvent(FindDuplicatesRefactoringPanel.this));
            }
            public void removeUpdate(DocumentEvent e) {
                parent.stateChanged(new ChangeEvent(FindDuplicatesRefactoringPanel.this));
            }
            public void changedUpdate(DocumentEvent e) {}
        });
        scope.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                parent.stateChanged(new ChangeEvent(FindDuplicatesRefactoringPanel.this));
            }
        });

        DefaultComboBoxModel dcbm = new DefaultComboBoxModel();

        for (Scope s : Scope.values()) {
            dcbm.addElement(s);
        }
        
        scope.setModel(dcbm);
        scope.setRenderer(new RendererImpl());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pattern = new javax.swing.JTextPane();
        scope = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jScrollPane1.setViewportView(pattern);

        scope.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText(org.openide.util.NbBundle.getMessage(FindDuplicatesRefactoringPanel.class, "FindDuplicatesRefactoringPanel.jLabel1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(FindDuplicatesRefactoringPanel.class, "FindDuplicatesRefactoringPanel.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scope, 0, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setPattern(String pattern) {
        this.pattern.setText(pattern);
    }

    public String getPattern() {
        return this.pattern.getText();
    }

    public void setScope(Scope scope) {
        this.scope.setSelectedItem(scope);
    }

    public Scope getScope() {
        return (Scope) this.scope.getSelectedItem();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane pattern;
    private javax.swing.JComboBox scope;
    // End of variables declaration//GEN-END:variables

    private static final class RendererImpl extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            String displayName;

            if (value instanceof Scope) {
                displayName = SCOPE_DISPLAY_NAMES.get((Scope) value);
            } else {
                displayName = value.toString();
            }
            
            return super.getListCellRendererComponent(list, displayName, index, isSelected, cellHasFocus);
        }

    }

    private static final Map<Scope, String> SCOPE_DISPLAY_NAMES;

    static {
        SCOPE_DISPLAY_NAMES = new EnumMap<Scope, String>(Scope.class);
        SCOPE_DISPLAY_NAMES.put(Scope.ALL_OPENED_PROJECTS, "All Opened Projects");
        SCOPE_DISPLAY_NAMES.put(Scope.ALL_REMOTE_PROJECTS, "All Remote Projects");
    }
    
}
