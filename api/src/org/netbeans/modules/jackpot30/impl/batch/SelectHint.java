/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2008-2009 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008-2009 Sun Microsystems, Inc.
 */

/*
 * SelectHint.java
 *
 * Created on Sep 24, 2008, 4:53:47 PM
 */

package org.netbeans.modules.jackpot30.impl.batch;

import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.DefaultListModel;
import org.netbeans.modules.jackpot30.impl.Utilities;
import org.netbeans.modules.jackpot30.spi.HintDescription;

/**
 *
 * @author Jan Lahoda
 */
public class SelectHint extends javax.swing.JPanel {

    private Map<String, Collection<HintDescription>> displayName2Hints;
    
    public SelectHint(Collection<? extends HintDescription> hints) {
        displayName2Hints = Utilities.sortOutHints(hints, new TreeMap<String, Collection<HintDescription>>());
        
        initComponents();

        DefaultListModel all = new DefaultListModel();
        DefaultListModel selected = new DefaultListModel();

        for (String dn : displayName2Hints.keySet()) {
            all.addElement(dn);
        }

        allHints.setModel(all);
        selectedHints.setModel(selected);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        allHintsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        allHints = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedHints = new javax.swing.JList();
        selectedHintsLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        addHint = new javax.swing.JButton();
        addAllHints = new javax.swing.JButton();
        removeHint = new javax.swing.JButton();
        removeAllHints = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        allHintsLabel.setText(org.openide.util.NbBundle.getMessage(SelectHint.class, "SelectHint.allHintsLabel.text_1")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
        add(allHintsLabel, gridBagConstraints);

        allHints.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(allHints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 6);
        add(jScrollPane1, gridBagConstraints);

        selectedHints.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(selectedHints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(jScrollPane2, gridBagConstraints);

        selectedHintsLabel.setText(org.openide.util.NbBundle.getMessage(SelectHint.class, "SelectHint.selectedHintsLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        add(selectedHintsLabel, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        addHint.setText(org.openide.util.NbBundle.getMessage(SelectHint.class, "SelectHint.addHint.text")); // NOI18N
        addHint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHintActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 6, 0);
        jPanel1.add(addHint, gridBagConstraints);

        addAllHints.setText(org.openide.util.NbBundle.getMessage(SelectHint.class, "SelectHint.addAllHints.text")); // NOI18N
        addAllHints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAllHintsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        jPanel1.add(addAllHints, gridBagConstraints);

        removeHint.setText(org.openide.util.NbBundle.getMessage(SelectHint.class, "SelectHint.removeHint.text")); // NOI18N
        removeHint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeHintActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        jPanel1.add(removeHint, gridBagConstraints);

        removeAllHints.setText(org.openide.util.NbBundle.getMessage(SelectHint.class, "SelectHint.removeAllHints.text")); // NOI18N
        removeAllHints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllHintsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        jPanel1.add(removeAllHints, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 5);
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void addHintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHintActionPerformed
        for (Object selected : allHints.getSelectedValues()) {
            ((DefaultListModel) selectedHints.getModel()).addElement(selected);
            ((DefaultListModel) allHints.getModel()).removeElement(selected);
        }
    }//GEN-LAST:event_addHintActionPerformed

    private void addAllHintsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAllHintsActionPerformed
        for (Object o : ((DefaultListModel) allHints.getModel()).toArray()) {
            ((DefaultListModel) selectedHints.getModel()).addElement(o);
        }
        ((DefaultListModel) allHints.getModel()).removeAllElements();
    }//GEN-LAST:event_addAllHintsActionPerformed

    private void removeHintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeHintActionPerformed
        for (Object selected : selectedHints.getSelectedValues()) {
            ((DefaultListModel) allHints.getModel()).addElement(selected);
            ((DefaultListModel) selectedHints.getModel()).removeElement(selected);
        }
    }//GEN-LAST:event_removeHintActionPerformed

    private void removeAllHintsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllHintsActionPerformed
        for (Object o : ((DefaultListModel) selectedHints.getModel()).toArray()) {
            ((DefaultListModel) allHints.getModel()).addElement(o);
        }
        ((DefaultListModel) selectedHints.getModel()).removeAllElements();
    }//GEN-LAST:event_removeAllHintsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAllHints;
    private javax.swing.JButton addHint;
    private javax.swing.JList allHints;
    private javax.swing.JLabel allHintsLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton removeAllHints;
    private javax.swing.JButton removeHint;
    private javax.swing.JList selectedHints;
    private javax.swing.JLabel selectedHintsLabel;
    // End of variables declaration//GEN-END:variables

    public List<HintDescription> getSelectedHints() {
        List<HintDescription> hints = new LinkedList<HintDescription>();

        for (Object dn : ((DefaultListModel) selectedHints.getModel()).toArray()) {
            hints.addAll(displayName2Hints.get((String) dn));
        }

        return hints;
    }
    
}
