31c31
< package org.netbeans.modules.java.editor.semantic;
---
> package org.netbeans.modules.jackpot30.backend.ui.highlighting;
39d38
< import java.util.ArrayList;
41,42d39
< import java.util.Collections;
< import java.util.Iterator;
46d42
< import javax.swing.text.Document;
48d43
< import org.netbeans.api.java.source.CompilationInfo;
50,51d44
< import org.netbeans.api.lexer.TokenHierarchy;
< import org.netbeans.api.lexer.TokenId;
52a46
> import org.netbeans.modules.jackpot30.resolve.api.CompilationInfo;
62d55
<     private Document doc;
65,66d57
<     private boolean topLevelIsJava;
<     private TokenSequence topLevel;
69c60
<     public TokenList(CompilationInfo info, final Document doc, AtomicBoolean cancel) {
---
>     public TokenList(CompilationInfo info, TokenSequence<?> topLevel, AtomicBoolean cancel) {
71d61
<         this.doc = doc;
76,77d65
<         doc.render(new Runnable() {
<             public void run() {
81c69
<                 topLevel = TokenHierarchy.get(doc).tokenSequence();
---
>                 assert topLevel.language() == JavaTokenId.language();
83,85d70
<                 topLevelIsJava = topLevel.language() == JavaTokenId.language();
<                 
<                 if (topLevelIsJava) {
89,91d73
<                 }
<             }
<         });
95c77
<         final int offset = info.getSnapshot().getOriginalOffset((int) inputOffset);
---
>         final int offset = (int) inputOffset;
99,100d80
<         doc.render(new Runnable() {
<             public void run() {
108,109c88
<                 
<                 if (topLevelIsJava) {
---
> 
114,148d92
<                 } else {
<                     Iterator<? extends TokenSequence> embeddedSeqs = null;
<                     if (ts == null) {
<                         List<? extends TokenSequence> seqs = new ArrayList<TokenSequence>(embeddedTokenSequences(TokenHierarchy.get(doc), offset));
<                         Collections.reverse(seqs);
<                         embeddedSeqs = seqs.iterator();
<                         while (embeddedSeqs.hasNext()) {
<                             TokenSequence tseq = embeddedSeqs.next();
<                             if (tseq.language() == JavaTokenId.language()) {
<                                 ts = tseq;
<                                 break;
<                             }
<                         }
<                     }
< 
<                     while (ts != null && ts.offset() < offset) {
<                         if (!ts.moveNext()) {
<                             ts = null;
<                             if (embeddedSeqs == null) {
<                                 List<? extends TokenSequence> seqs = new ArrayList<TokenSequence>(embeddedTokenSequences(TokenHierarchy.get(doc), offset));
<                                 Collections.reverse(seqs);
<                                 embeddedSeqs = seqs.iterator();
<                             }
<                             while (embeddedSeqs.hasNext()) {
<                                 TokenSequence tseq = embeddedSeqs.next();
<                                 if (tseq.language() == JavaTokenId.language()) {
<                                     ts = tseq;
<                                     break;
<                                 }
<                             }
<                         }
<                     }
<                 }
<             }
<         });
177,178d120
<         doc.render(new Runnable() {
<             public void run() {
196c138
<                     if (name.equals(info.getTreeUtilities().decodeIdentifier(ts.token().text()).toString())) {
---
>                     if (name.equals(ts.token().text().toString())) {
202,203d143
<             }
<         });
207,208d146
<         doc.render(new Runnable() {
<             public void run() {
222c160
<                 if (t.id() == JavaTokenId.IDENTIFIER && tree.getName().toString().equals(info.getTreeUtilities().decodeIdentifier(t.text()).toString())) {
---
>                 if (t.id() == JavaTokenId.IDENTIFIER && tree.getName().toString().equals(t.text().toString())) {
228,229d165
<             }
<         });
233,234d168
<         doc.render(new Runnable() {
<             public void run() {
249,250d182
<                     offset = info.getSnapshot().getOriginalOffset(offset);
<                     
260,261d191
<             }
<         });
265,266d194
<         doc.render(new Runnable() {
<             public void run() {
279,298d206
<             }
<         });
<     }
<     
<     private static List<TokenSequence<?>> embeddedTokenSequences(TokenHierarchy<Document> th, int offset) {
<         TokenSequence<?> embedded = th.tokenSequence();
<         List<TokenSequence<?>> sequences = new ArrayList<TokenSequence<?>>();
< 
<         do {
<             TokenSequence<?> seq = embedded;
<             embedded = null;
< 
<             seq.move(offset);
<             if (seq.moveNext()) {
<                 sequences.add(seq);
<                 embedded = seq.embedded();
<             }
<         } while (embedded != null);
<         
<         return sequences;
